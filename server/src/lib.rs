use num_bigint::{BigUint, RandBigInt};
use num_traits::One;
use rand::Rng;

pub const G: &[u8] = &[0x02];

pub const H: &[u8] = &[
    0x6E, 0x54, 0x64, 0x31, 0x4A, 0x1F, 0xC1, 0x72, 0x6F, 0x86, 0xBA, 0x8C, 0x91, 0x27, 0x86, 0xC3,
    0xA4, 0x25, 0x84, 0xD0, 0xD8, 0xFF, 0xC6, 0x12, 0x5A, 0x99, 0x85, 0x95, 0x1D, 0x3E, 0x94, 0xFE,
    0xD2, 0xA4, 0x98, 0x43, 0x22, 0x6D, 0x7B, 0x9E, 0x07, 0x57, 0xF6, 0x7F, 0xE7, 0xC3, 0x75, 0x58,
    0x00, 0xA6, 0xDE, 0x85, 0x7D, 0xB0, 0xF5, 0x11, 0x18, 0x6C, 0xB3, 0x69, 0x03, 0xF9, 0xED, 0x07,
    0xEB, 0xFC, 0xF6, 0x93, 0x61, 0x9C, 0xBB, 0xAA, 0x89, 0xFA, 0x5A, 0x30, 0x67, 0xC1, 0x45, 0x17,
    0x46, 0x6C, 0xA3, 0x78, 0xED, 0x54, 0xFE, 0xDA, 0x99, 0x43, 0xCC, 0x83, 0x73, 0x6D, 0xF0, 0x7E,
    0xB6, 0x28, 0x93, 0x8A, 0x10, 0x3F, 0x43, 0x66, 0x01, 0xBE, 0x98, 0x08, 0x30, 0x48, 0x18, 0xB2,
    0xEC, 0x82, 0x65, 0x52, 0x93, 0xF0, 0xF3, 0xC0, 0xA4, 0x9E, 0xDD, 0xD1, 0xD9, 0xC4, 0x65, 0xB9,
    0x3F, 0xA7, 0x04, 0x6F, 0x4C, 0x29, 0x5F, 0x10, 0x86, 0x56, 0xFB, 0xB2, 0xDA, 0xA6, 0xCF, 0xE5,
    0xB4, 0x56, 0x00, 0x27, 0xA6, 0x4C, 0xC8, 0xF4, 0x5D, 0x7E, 0x57, 0x37, 0xE4, 0xD6, 0x0D, 0xC5,
    0x7C, 0x5C, 0xB8, 0x96, 0x0F, 0x05, 0xC6, 0x38, 0x6C, 0x88, 0x79, 0x9C, 0xC5, 0xB5, 0x74, 0x20,
    0x16, 0x1A, 0xFA, 0x8E, 0x51, 0xC4, 0x06, 0x2E, 0x19, 0x39, 0xDE, 0x6D, 0x96, 0xCB, 0x77, 0xD3,
];

pub const P: &[u8] = &[
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
    0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
    0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
    0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
    0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
    0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
    0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
    0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05,
    0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
    0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
    0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04,
    0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x23, 0x73, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];

pub const Q: &[u8] = &[
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE4, 0x87, 0xED, 0x51, 0x10, 0xB4, 0x61, 0x1A,
    0x62, 0x63, 0x31, 0x45, 0xC0, 0x6E, 0x0E, 0x68, 0x94, 0x81, 0x27, 0x04, 0x45, 0x33, 0xE6, 0x3A,
    0x01, 0x05, 0xDF, 0x53, 0x1D, 0x89, 0xCD, 0x91, 0x28, 0xA5, 0x04, 0x3C, 0xC7, 0x1A, 0x02, 0x6E,
    0xF7, 0xCA, 0x8C, 0xD9, 0xE6, 0x9D, 0x21, 0x8D, 0x98, 0x15, 0x85, 0x36, 0xF9, 0x2F, 0x8A, 0x1B,
    0xA7, 0xF0, 0x9A, 0xB6, 0xB6, 0xA8, 0xE1, 0x22, 0xF2, 0x42, 0xDA, 0xBB, 0x31, 0x2F, 0x3F, 0x63,
    0x7A, 0x26, 0x21, 0x74, 0xD3, 0x1B, 0xF6, 0xB5, 0x85, 0xFF, 0xAE, 0x5B, 0x7A, 0x03, 0x5B, 0xF6,
    0xF7, 0x1C, 0x35, 0xFD, 0xAD, 0x44, 0xCF, 0xD2, 0xD7, 0x4F, 0x92, 0x08, 0xBE, 0x25, 0x8F, 0xF3,
    0x24, 0x94, 0x33, 0x28, 0xF6, 0x72, 0x2D, 0x9E, 0xE1, 0x00, 0x3E, 0x5C, 0x50, 0xB1, 0xDF, 0x82,
    0xCC, 0x6D, 0x24, 0x1B, 0x0E, 0x2A, 0xE9, 0xCD, 0x34, 0x8B, 0x1F, 0xD4, 0x7E, 0x92, 0x67, 0xAF,
    0xC1, 0xB2, 0xAE, 0x91, 0xEE, 0x51, 0xD6, 0xCB, 0x0E, 0x31, 0x79, 0xAB, 0x10, 0x42, 0xA9, 0x5D,
    0xCF, 0x6A, 0x94, 0x83, 0xB8, 0x4B, 0x4B, 0x36, 0xB3, 0x86, 0x1A, 0xA7, 0x25, 0x5E, 0x4C, 0x02,
    0x78, 0xBA, 0x36, 0x04, 0x65, 0x11, 0xB9, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];

pub fn exponentiate(num: &BigUint, exp: &BigUint, p: &BigUint) -> BigUint {
    num.modpow(exp, p)
}

pub fn solve(x: &BigUint, k: &BigUint, c: &BigUint, q: &BigUint) -> BigUint {
    // s = (k - c * x) mod q
    // let s = (k as i32 - (c * x) as i32) % q as i32;
    // if s >= 0 {
    //     s as u32
    // } else {
    //     (q as i32 + s) as u32
    // }
    if k >= &(c * x) {
        k - (c * x).modpow(&BigUint::one(), q)
    } else {
        q - (c * x - k).modpow(&BigUint::one(), q)
    }
}

pub fn verify(
    p: &BigUint,
    y1: &BigUint,
    y2: &BigUint,
    r1: &BigUint,
    r2: &BigUint,
    g: &BigUint,
    h: &BigUint,
    c: &BigUint,
    s: &BigUint,
) -> bool {
    // R1 = g ^ s * Y1 ^ c
    let eq1 = *r1 == (exponentiate(g, s, p) * exponentiate(y1, c, p)).modpow(&BigUint::one(), p);
    // R2 = h ^ s * Y2 ^ c
    let eq2 = *r2 == (exponentiate(h, s, p) * exponentiate(y2, c, p)).modpow(&BigUint::one(), p);

    eq1 && eq2
}

pub fn random_number() -> BigUint {
    let mut rng = rand::thread_rng();
    rng.gen_biguint(256)
}

pub fn random_string(n: usize) -> String {
    rand::thread_rng()
        .sample_iter(&rand::distributions::Alphanumeric)
        .take(n)
        .map(char::from)
        .collect()
}

pub fn serialize(n: &BigUint) -> Vec<u8> {
    n.to_bytes_be()
}

pub fn deserialize(bytes: &[u8]) -> BigUint {
    BigUint::from_bytes_be(bytes)
}

// tests
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exponentiate() {
        assert_eq!(
            exponentiate(
                &BigUint::from(1u32),
                &BigUint::from(2u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(1u32)
        );
        assert_eq!(
            exponentiate(
                &BigUint::from(2u32),
                &BigUint::from(3u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(8u32)
        );
        assert_eq!(
            exponentiate(
                &BigUint::from(2u32),
                &BigUint::from(4u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(5u32)
        );
    }

    #[test]
    fn test_solve() {
        // (10 - 2 * 1) mod 101 = 8
        assert_eq!(
            solve(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(1u32),
                &BigUint::from(101u32)
            ),
            BigUint::from(8u32)
        );
        // (10 - 2 * 6) mod 101 = 99
        assert_eq!(
            solve(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(6u32),
                &BigUint::from(101u32)
            ),
            BigUint::from(99u32)
        );
    }

    #[test]
    fn test_verify() {
        // p = 23, g = 4, h = 9
        // x = 6, k = 7, c = 4, s = 5
        // y1 = 2, y2 = 3
        // r1 = 8, r2 = 4
        let p = BigUint::from(23u32);
        let g = BigUint::from(4u32);
        let h = BigUint::from(9u32);
        let c = BigUint::from(4u32);
        let s = BigUint::from(5u32);
        let y1 = BigUint::from(2u32);
        let y2 = BigUint::from(3u32);
        let r1 = BigUint::from(8u32);
        let r2 = BigUint::from(4u32);

        assert!(verify(&p, &y1, &y2, &r1, &r2, &g, &h, &c, &s));
        assert!(!verify(
            &p,
            &y1,
            &y2,
            &r1,
            &r2,
            &g,
            &h,
            &c,
            &BigUint::from(6u32)
        ));
    }

    #[test]
    fn test_toy_example() {
        let q = BigUint::from(11u32);
        let p = BigUint::from(23u32);
        let g = BigUint::from(4u32);
        let h = BigUint::from(9u32);
        let x = BigUint::from(6u32);

        let y1 = exponentiate(&g, &x, &p);
        let y2 = exponentiate(&h, &x, &p);

        let k = random_number(); // limiting to 0-99 for test case simplicity

        let r1 = exponentiate(&g, &k, &p);
        let r2 = exponentiate(&h, &k, &p);

        let c = random_number();
        let s = solve(&x, &k, &c, &q);

        assert!(verify(&p, &y1, &y2, &r1, &r2, &g, &h, &c, &s));
    }
}