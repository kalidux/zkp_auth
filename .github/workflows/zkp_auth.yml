name: zkp auth test

on:
  push:
    branches:
      - main

jobs:
  build-server:
    name: Build Server Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Server Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zkp_server:latest -f server/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/zkp_server:latest

  build-client:
    name: Build Client Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Client Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zkp_client:latest -f client/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/zkp_client:latest

  test-images:
    name: Test Server and Client Images
    runs-on: ubuntu-latest
    needs: [build-server, build-client]  # Ensure both images are built before testing
    services:
      docker:
        image: docker:19.03.12
        options: --privileged  # Allows for running Docker within Docker for testing

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create Docker Network
      run: |
        docker network inspect zkp_network || docker network create zkp_network

    - name: Start Server and Client with Docker Compose
      run: |
        # Start server using the server docker-compose file
        cd server && docker-compose -f docker-compose-server.yml up -d
        sleep 30  # Wait for the server to be fully up and running
        cd ../client && docker-compose -f docker-compose-client.yml up --abort-on-container-exit

    - name: Verify Client Output
      run: |
        # Check client logs to confirm the output is correct
        CLIENT_LOG=$(docker-compose -f client/docker-compose-client.yml logs client)
        # Ensure the logs contain the expected SessionID output
        if echo "$CLIENT_LOG" | grep -q 'SessionID='; then
          echo "Client ran successfully with a valid session ID."
        else
          echo "Client test failed, no valid session ID found."
          exit 1
        fi

    - name: Tear down Docker Compose
      run: |
        cd client && docker-compose -f docker-compose-client.yml down
        cd ../server && docker-compose -f docker-compose-server.yml down
