name: zkp auth test

on:
  push:
    branches:
      - main

jobs:
  build-server:
    name: Build Server Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write  # Needed for signing the images with GitHub OIDC Token

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install Protobuf Compiler
      run: sudo apt-get install -y protobuf-compiler

    - name: Static Analysis with Clippy
      run: |
        cd server
        cargo clippy || true # Continue even if clippy fails

    - name: Security Vulnerability Check with cargo-audit
      run: |
        cd server
        cargo audit || true # Continue even if cargo-audit fails     

    - name: Build Server Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zkp_server:latest -f server/Dockerfile .

    - name: Run Trivy vulnerability scanner
      continue-on-error: true
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/zkp_server:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push Server Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/zkp_server:latest

    - name: Get Server Image Digest
      id: server_digest
      run: |
        SERVER_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' docker.io/${{ secrets.DOCKER_USERNAME }}/zkp_server:latest)
        echo "SERVER_DIGEST=$SERVER_DIGEST" >> $GITHUB_ENV

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0

    - name: Sign Server Image with GitHub OIDC using Digest
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        cosign sign -y ${{ env.SERVER_DIGEST }}

  build-client:
    name: Build Client Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write  # Needed for signing the images with GitHub OIDC Token

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install Protobuf Compiler
      run: sudo apt-get install -y protobuf-compiler

    - name: Static Analysis with Clippy
      run: |
        cd client
        cargo clippy || true

    - name: Security Vulnerability Check with cargo-audit
      run: |
        cd client
        cargo audit || true

    - name: Build Client Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zkp_client:latest -f client/Dockerfile .

    - name: Run Trivy vulnerability scanner
      continue-on-error: true
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/zkp_client:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push Client Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/zkp_client:latest

    - name: Get Client Image Digest
      id: client_digest
      run: |
        CLIENT_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' docker.io/${{ secrets.DOCKER_USERNAME }}/zkp_client:latest)
        echo "CLIENT_DIGEST=$CLIENT_DIGEST" >> $GITHUB_ENV

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0

    - name: Sign Client Image with GitHub OIDC using Digest
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        cosign sign -y ${{ env.CLIENT_DIGEST }}

  test-images:
    name: Test Server and Client Images
    runs-on: ubuntu-latest
    needs: [build-server, build-client]  # Ensure both images are built before testing
    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Set DOCKER_USERNAME environment variable
      run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

    - name: Create Docker Network
      run: |
        docker network inspect zkp_network || docker network create zkp_network

    - name: Pull Server and Client Images
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/zkp_server:latest
        docker pull ${{ secrets.DOCKER_USERNAME }}/zkp_client:latest

    - name: Start Server and Client with Docker Compose
      run: |
        # Use Docker Compose to start the pulled images
        cd server && docker-compose -f docker-compose-server.yml up -d
        sleep 5  # Wait for the server to be fully up and running
        cd ../client && docker-compose -f docker-compose-client.yml up --abort-on-container-exit

    - name: Verify Client Output
      run: |
        # Check client logs to confirm the output is correct
        CLIENT_LOG=$(docker-compose -f client/docker-compose-client.yml logs client)
        if echo "$CLIENT_LOG" | grep -q 'SessionID='; then
          echo "Client ran successfully with a valid session ID."
        else
          echo "Client test failed, no valid session ID found."
          exit 1
        fi

    - name: Tear down Docker Compose
      run: |
        cd client && docker-compose -f docker-compose-client.yml down
        cd ../server && docker-compose -f docker-compose-server.yml down

  deploy-on-aws:
    name: Deploy Infrastructure to AWS
    runs-on: ubuntu-latest
    needs: [test-images]  # Deploy only after testing is complete

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2  

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Install Terragrunt
      run: |
        curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.67.14/terragrunt_linux_amd64 -o terragrunt
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Initialize Terragrunt
      run: |
        cd infrastructure/dev
        terragrunt init

    - name: Check terraform configuration
      run: |
        cd infrastructure/modules/chaum-pederson-zkp
        terraform init
        terraform fmt
        terraform validate

    - name: Deploy client and server using IaC
      run: |
        cd infrastructure/dev
        terragrunt apply --auto-approve 
  
    - name: Destroy infrastructure
      run: |
        cd infrastructure/dev
        terragrunt destroy --auto-approve 